{"version":3,"file":"index.cjs.js","sources":["../src/brfc.js","../src/constants.js","../src/dns-over-https.js","../src/dns-client.js","../src/http.js","../src/EndpointResolver.js","../src/VerifiableMessage.js","../src/RequestBodyFactory.js","../src/Clock.js","../src/errors/PaymailNotFound.js","../src/BrowserDns.js","../src/PaymailClient.js"],"sourcesContent":["const bsv = require('bsv');\n\nconst brfc = (title, authors, version) => {\n  const autorString = authors.join(', ').trim();\n  const stringToHash = [title.trim() + autorString + (version.toString() || '')].join('').trim();\n  let hash = bsv.crypto.Hash.sha256sha256(Buffer.from(stringToHash));\n  hash = hash.reverse();\n  return hash.toString('hex').substring(0, 12);\n};\n\nexport { brfc }\n","import { brfc } from './brfc'\n\nexport const CapabilityCodes = {\n  pki: 'pki',\n  paymentDestination: 'paymentDestination',\n  requestSenderValidation: brfc(\n    'bsvalias Payment Addressing (Payer Validation)',\n    [ 'andy (nChain)' ],\n    ''\n  ),\n  verifyPublicKeyOwner: brfc(\n    'bsvalias public key verify (Verify Public Key Owner)',\n    [],\n    ''\n  ),\n  publicProfile: brfc(\n    'Public Profile (Name & Avatar)',\n    [ 'Ryan X. Charles (Money Button)' ],\n    '1'\n  ),\n  receiveTransaction: brfc(\n    'Send raw transaction',\n    [ 'Miguel Duarte (Money Button)', 'Ryan X. Charles (Money Button)', 'Ivan Mlinaric (Handcash)', 'Rafa (Handcash)' ],\n    '1.1'\n  ),\n  p2pPaymentDestination: brfc(\n    'Get no monitored payment destination (p2p payment destination)',\n    [ 'Miguel Duarte (Money Button)', 'Ryan X. Charles (Money Button)', 'Ivan Mlinaric (Handcash)', 'Rafa (Handcash)' ],\n    '1.1'\n  ),\n  witnessPublic: brfc(\n    'Public API of the Controllable UTXO Token Witness',\n    [ 'LI Long (ChainBow)' ],\n    '1'\n  ),\n  witnessCheckBaton: brfc(\n    'Check Baton API of the Controllable UTXO Token Witness',\n    [ 'LI Long (ChainBow)' ],\n    '1'\n  ),\n  witnessCheckToken: brfc(\n    'Check Token API of the Controllable UTXO Token Witness',\n    [ 'LI Long (ChainBow)' ],\n    '1'\n  ),\n  witnessCheckSale: brfc(\n    'Check Sale API of the Controllable UTXO Token Witness',\n    [ 'LI Long (ChainBow)' ],\n    '1'\n  ),//expect: 'c89beec44e80',\n  witnessCheckBuy: brfc(\n    'Check Buy API of the Controllable UTXO Token Witness',\n    [ 'LI Long (ChainBow)' ],\n    '1',\n  ),//expect: '598b080631c4',\n  tokenLogo: brfc(\n    'Logo URI of the Controllable UTXO Token',\n    [ 'LI Long (ChainBow)' ],\n    '1'\n  ),\n  tokenInformation: brfc(\n    'Infomation URI of the Controllable UTXO Token',\n    [ 'LI Long (ChainBow)' ],\n    '1'\n  ),\n}\n","class DnsOverHttps {\n  constructor (fetch, config) {\n    this.fetch = fetch\n    this.config = config\n  }\n\n  async resolveSrv (aDomain) {\n    const response = await this.fetch(`${this.config.baseUrl}?name=${aDomain}&type=SRV&cd=0`)\n    const body = await response.json()\n    return body\n  }\n\n  async queryBsvaliasDomain (aDomain) {\n    return this.resolveSrv(`_bsvalias._tcp.${aDomain}`)\n  }\n}\n\nexport { DnsOverHttps }\n","import { DnsOverHttps } from './dns-over-https'\nimport Promise from 'bluebird';\nclass DnsClient {\n  constructor (dns, fetch) {\n    this.dns = dns\n    this.dohAli = new DnsOverHttps(fetch, { baseUrl: 'https://dns.alidns.com/resolve' })\n    this.dohGoogle = new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' })\n  }\n\n  async checkSrv (aDomain) {\n    return new Promise((resolve, reject) => {\n      this.dns.resolveSrv(`_bsvalias._tcp.${aDomain}`, async (err, result) => {\n        try {\n          if (err && (err.code === 'ENODATA' || err.code === 'ENOTFOUND')) {\n            return resolve({\n              domain: aDomain,\n              port: 443,\n              isSecure: true\n            })\n          }\n          if (err) {\n            return reject(err)\n          }\n\n          const { name: domainFromDns, port, isSecure } = result[0]\n          resolve({\n            domain: domainFromDns,\n            port,\n            isSecure: this.checkDomainIsSecure(domainFromDns, aDomain) || isSecure\n          })\n        } catch (err) {\n          return reject(err)\n        }\n      })\n    }).then(result => {\n      if (result.isSecure) {\n        return result\n      } else {\n        return this.validateDnssec(aDomain)\n      }\n    }, (err) => {\n      console.error(err)\n      return err\n    })\n  }\n\n  checkDomainIsSecure (srvResponseDomain, originalDomain) {\n    if (this.domainsAreEqual(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.responseIsWwwSubdomain(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.isHandcashDomain(originalDomain)) { // tell rafa to fix handcash and we can remove the special case :)\n      return this.domainsAreEqual('handcash-paymail-production.herokuapp.com', srvResponseDomain) || this.domainsAreEqual('handcash-cloud-production.herokuapp.com', srvResponseDomain)\n    } else if (this.isHandcashInternalDomain(originalDomain)) {\n      return this.domainsAreEqual('handcash-cloud-staging.herokuapp.com', srvResponseDomain)\n    } else if (this.domainsAreEqual('localhost', srvResponseDomain)) {\n      return true\n    } else if (this.isMoneyButtonDomain(srvResponseDomain)) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  isMoneyButtonDomain (aDomain) {\n    return this.domainsAreEqual(aDomain, 'moneybutton.com') || this.domainsAreEqual(aDomain, 'www.moneybutton.com')\n  }\n\n  responseIsWwwSubdomain (srvResponseDomain, originalDomain) {\n    return this.domainsAreEqual(srvResponseDomain, `www.${originalDomain}`)\n  }\n\n  isHandcashDomain (aDomain) {\n    return this.domainsAreEqual('handcash.io', aDomain)\n  }\n\n  isHandcashInternalDomain (aDomain) {\n    return this.domainsAreEqual('internal.handcash.io', aDomain)\n  }\n\n  async validateDnssec (aDomain) {\n    const dnsResponse = await Promise.any([\n      this.dohAli.queryBsvaliasDomain(aDomain),\n      this.dohGoogle.queryBsvaliasDomain(aDomain)\n    ]) \n    if (dnsResponse.Status !== 0 || !dnsResponse.Answer) {\n      throw new Error('Insecure domain.')\n    }\n    const data = dnsResponse.Answer[0].data.split(' ')\n    const port = data[2]\n    const responseDomain = data[3]\n    // if (!dnsResponse.AD && !this.domainsAreEqual(aDomain, responseDomain)) {\n    //   throw new Error('Insecure domain.')\n    // }\n    return {\n      port,\n      domain: responseDomain,\n      isSecure: dnsResponse.AD\n    }\n  }\n\n  domainsAreEqual (domain1, domain2) {\n    return domain1.toLowerCase().replace(/\\.$/, '') === domain2.toLowerCase().replace(/\\.$/, '')\n  }\n}\n\nexport { DnsClient }\n","class Http {\n  constructor ( fetch ) {\n    this.fetch = fetch\n  }\n\n  async get ( url ) {\n    return this._basicRequest( url )\n  }\n\n  async postJson ( url, body ) {\n    return this._basicRequest( url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify( body )\n    } )\n  }\n\n  async _basicRequest ( url, options = {} ) {\n    const timeout = 5000\n    return Promise.race( [\n      this.fetch( url, {\n        ...options,\n        credentials: 'omit',\n      } ),\n      new Promise( ( _, reject ) =>\n        setTimeout( () => reject( new Error( 'timeout' ) ), timeout )\n      )\n    ] );\n  }\n}\n\nexport { Http }\n","import { CapabilityCodes } from './constants'\nimport { DnsClient } from './dns-client'\nimport { Http } from './http'\n\nclass EndpointResolver {\n  constructor (dns = null, fetch) {\n    this.dnsClient = new DnsClient(dns, fetch)\n\n    this.http = new Http(fetch)\n    this._cache = {}\n  }\n\n  static create (dnsClient, fetch) {\n    const instance = new EndpointResolver(null, fetch)\n    instance.dnsClient = dnsClient\n    return instance\n  }\n\n  async getIdentityUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.pki)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const identityUrl = apiDescriptor.capabilities.pki\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return identityUrl\n  }\n\n  async getAddressUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.paymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const addressUrl = apiDescriptor.capabilities.paymentDestination\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return addressUrl\n  }\n\n  async getVerifyUrlFor (aPaymail, aPubkey) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.verifyPublicKeyOwner)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.verifyPublicKeyOwner]\n      .replace('{alias}', alias).replace('{domain.tld}', domain).replace('{pubkey}', aPubkey)\n    return url\n  }\n\n  async getPublicProfileUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.publicProfile)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.publicProfile]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getSendTxUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.receiveTransaction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.receiveTransaction]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getP2pPatmentDestinationUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.p2pPaymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.p2pPaymentDestination]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async domainHasCapability (aDomain, capability) {\n    const apiDescriptor = await this.getApiDescriptionFor(aDomain)\n    return !!apiDescriptor.capabilities[capability]\n  }\n\n  async getApiDescriptionFor (aDomain) {\n    if (this._cache[aDomain]) {\n      return this._cache[aDomain]\n    }\n    const { domain, port } = await this.getWellKnownBaseUrl(aDomain)\n    const apiDescriptor = await this.fetchApiDescriptor(domain, port)\n    this._cache[aDomain] = apiDescriptor\n    return apiDescriptor\n  }\n\n  async fetchApiDescriptor (domain, port) {\n    const protocol = (domain === 'localhost' || domain === 'localhost.') ? 'http' : 'https'\n    const requestPort = (port === undefined || port.toString() === '443') ? '' : `:${port}`\n    const requestDomain = /^(.*?)\\.?$/.exec(domain)[1] // Get value from capture group\n    if (!requestDomain) {\n      throw new Error(`Invalid domain: ${domain}`)\n    }\n    const wellKnown = await this.http.get(`${protocol}://${requestDomain}${requestPort}/.well-known/bsvalias`)\n    const apiDescriptor = await wellKnown.json()\n    return apiDescriptor\n  }\n\n  async getWellKnownBaseUrl (aDomain) {\n    return this.dnsClient.checkSrv(aDomain)\n  }\n\n  async ensureCapabilityFor (aDomain, aCapability) {\n    if (!await this.domainHasCapability(aDomain, aCapability)) {\n      throw new Error(`Unknown capability \"${aCapability}\" for \"${aDomain}\"`)\n    }\n  }\n}\n\nexport { EndpointResolver }\n","class VerifiableMessage {\n  constructor (parts, bsv = null) {\n    if (bsv === null) {\n      bsv = require('bsv')\n      bsv.Message = require('bsv/message')\n    }\n    this.bsv = bsv\n    const concatenated = Buffer.from(parts.join(''))\n    this.message = new this.bsv.Message(concatenated)\n  }\n\n  static forBasicAddressResolution ({\n    senderHandle,\n    amount,\n    dt,\n    purpose\n  }) {\n    if (dt && dt.toISOString) {\n      dt = dt.toISOString()\n    }\n\n    return new VerifiableMessage([\n      senderHandle,\n      amount || '0',\n      dt,\n      purpose\n    ])\n  }\n\n  sign (wifPrivateKey) {\n    return this.message.sign(this.bsv.PrivateKey.fromWIF(wifPrivateKey))\n  }\n\n  verify (keyAddress, signature) {\n    return this.message.verify(keyAddress, signature)\n  }\n}\n\nexport { VerifiableMessage }\n","import { VerifiableMessage } from './VerifiableMessage'\n\nclass RequestBodyFactory {\n  constructor (clock) {\n    this.clock = clock\n  }\n\n  buildBodyToRequestAddress (senderInfo, privateKey = null) {\n    const {\n      senderHandle,\n      amount,\n      senderName,\n      purpose,\n      pubkey,\n      signature: providedSignature\n    } = senderInfo\n\n    if (!providedSignature && privateKey === null) {\n      throw new Error('Missing private key or signature')\n    }\n\n    let dt, signature\n    if (providedSignature) {\n      if (!senderInfo.dt) {\n        throw new Error('missing datetime for given signature')\n      }\n      dt = senderInfo.dt\n      signature = providedSignature\n    } else {\n      dt = this.clock.now()\n      signature = VerifiableMessage.forBasicAddressResolution({\n        senderHandle,\n        amount,\n        dt,\n        purpose\n      }).sign(privateKey)\n    }\n\n    return {\n      senderHandle,\n      senderName,\n      purpose,\n      dt,\n      amount: amount || null,\n      pubkey,\n      signature\n    }\n  }\n\n  buildBodySendTx (hexTransaction, reference, metadata) {\n    return { hex: hexTransaction, metadata, reference }\n  }\n\n  buildBodyP2pPaymentDestination (satoshis) {\n    return { satoshis }\n  }\n}\n\nexport { RequestBodyFactory }\n","\nclass Clock {\n  now () {\n    return new Date()\n  }\n}\n\nexport { Clock }\n","class PaymailNotFound extends Error {\n  constructor (message, paymail) {\n    super(message)\n    this.paymail = paymail\n  }\n}\n\nexport { PaymailNotFound }\n","import { DnsOverHttps } from './dns-over-https'\nimport Promise from 'bluebird';\n\nclass BrowserDns {\n  constructor (fetch) {\n    this.dohAli = new DnsOverHttps(fetch, { baseUrl: 'https://dns.alidns.com/resolve' })\n    this.dohGoogle = new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' })\n  }\n\n  async resolveSrv (aDomain, aCallback) {\n    try {\n      const response = await Promise.any([\n        this.dohAli.resolveSrv(aDomain),\n        this.dohGoogle.resolveSrv(aDomain)\n      ])\n\n      if (response.Status === 0 && response.Answer) {\n        const data = response.Answer.map(record => {\n          const [priority, weight, port, name] = record.data.split(' ')\n          return {\n            priority,\n            weight,\n            port,\n            name,\n            isSecure: response.AD\n          }\n        })\n        aCallback(null, data)\n      } else if (!response.Answer) {\n        // ignore check response.Status === 0\n        aCallback({ code: 'ENODATA' })\n      } else {\n        aCallback(new Error('error during dns query'))\n      }\n    } catch (e) {\n      aCallback(e)\n    }\n  }\n}\n\nexport { BrowserDns }\n","import { EndpointResolver } from './EndpointResolver'\nimport { RequestBodyFactory } from './RequestBodyFactory'\nimport { Clock } from './Clock'\nimport { PaymailNotFound } from './errors/PaymailNotFound'\nimport { CapabilityCodes } from './constants'\nimport fetch from 'cross-fetch'\nimport { BrowserDns } from './BrowserDns'\nimport { Http } from './http'\n\nclass PaymailClient {\n  constructor ( dns = null, fetch2 = null, clock = null, bsv = null ) {\n    if ( fetch2 === null ) {\n      fetch2 = fetch\n    }\n    if ( dns === null ) {\n      dns = new BrowserDns( fetch2 )\n    }\n    if ( bsv === null ) {\n      bsv = require( 'bsv' )\n    }\n    this.bsv = bsv\n    this.resolver = new EndpointResolver( dns, fetch2 )\n    this.http = new Http( fetch2 )\n    this.requestBodyFactory = new RequestBodyFactory( clock !== null ? clock : new Clock() )\n  }\n\n  /**\n   * Get witness public.\n   *\n   * @param {String} domain - a domain\n   */\n  async witnessPublic ( domain ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessPublic ]\n    const response = await this.http.get( url )\n    return await response.json()\n  }\n\n  /**\n   * witness check baton.\n   *\n   * @param {String} domain - a domain\n   */\n  async witnessCheckBaton ( domain, args ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessCheckBaton ]\n    const response = await this.http.get( `${url}?${new URLSearchParams( args )}` )\n    return await response.json()\n  }\n\n  /**\n   * witness check token.\n   *\n   * @param {String} domain - a domain\n   */\n  async witnessCheckToken ( domain, args ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessCheckToken ]\n    const response = await this.http.get( `${url}?${new URLSearchParams( args )}` )\n    return await response.json()\n  }\n\n  /**\n * witness check sale contract.\n *\n * @param {String} domain - a domain\n */\n  async witnessCheckSale ( domain, args ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessCheckSale ]\n    const response = await this.http.get( `${url}?${new URLSearchParams( args )}` )\n    return await response.json()\n  }\n\n  /**\n* witness check buy contract.\n*\n* @param {String} domain - a domain\n*/\n  async witnessCheckBuy ( domain, args ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessCheckBuy ]\n    const response = await this.http.get( `${url}?${new URLSearchParams( args )}` )\n    return await response.json()\n  }\n\n  /**\n   * Get token's logo uri.\n   *\n   * @param {String} domain - a domain\n   * @param {String} contractId - contractId of Token\n   * return uri string\n   */\n  async tokenLogo ( domain, contractId ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    let uri = apiDescriptor.capabilities[ CapabilityCodes.tokenLogo ]\n    uri = uri.replace( '{contractId}', contractId )\n    return { uri }\n  }\n\n  /**\n * Get token's info json.\n *\n * @param {String} domain - a domain\n * @param {String} contractId - contractId of Token\n */\n  async tokenInformation ( domain, contractId ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    let uri = apiDescriptor.capabilities[ CapabilityCodes.tokenInformation ]\n    uri = uri.replace( '{contractId}', contractId )\n    const response = await this.http.get( uri )\n    return await response.json()\n  }\n\n  /**\n   * Uses pki flow to query for an identity key for a given paymail address.\n   *\n   * @param {String} paymail - a paymail address\n   */\n  async getPublicKey ( paymail ) {\n    const identityUrl = await this.resolver.getIdentityUrlFor( paymail )\n    const response = await this.http.get( identityUrl )\n    const { pubkey } = await response.json()\n    return pubkey\n  }\n\n  /**\n   * Uses `Basic Address Resolution` flow to query for a payment for output for the\n   * given paymail address.\n   *\n   * @param {String} aPaymail - a paymail address\n   * @param {Object} senderInfo - Object containing sender info\n   * @param {String} senderInfo.senderHandle - Sender paymail address\n   * @param {String} senderInfo.amount - Optional. Required amount.\n   * @param {String} senderInfo.senderName - Optional. Sender name.\n   * @param {String} senderInfo.purpose - Optional. Purpose of the payment.\n   * @param {String} senderInfo.pubkey - Optional. Public key used to sign the message.\n   * @param {String} senderInfo.signature - Optional. Valid signature according to paymail specification.\n   * @param {String} privateKey - Optional. private key to sign the request.\n   */\n  async getOutputFor ( aPaymail, senderInfo, privateKey = null ) {\n    const addressUrl = await this.resolver.getAddressUrlFor( aPaymail )\n    const response = await this.http.postJson(\n      addressUrl,\n      this.requestBodyFactory.buildBodyToRequestAddress( senderInfo, privateKey )\n    )\n    if ( !response.ok ) {\n      throw new PaymailNotFound( `Paymail not found: ${aPaymail}`, aPaymail )\n    }\n    const { output } = await response.json()\n    return output\n  }\n\n  /**\n   * Verify if the given public address belongs to the given\n   * paymail address.\n   *\n   * @param {String} pubkey - Public key to check.\n   * @param {String} paymail - a paymail address\n   */\n  async verifyPubkeyOwner ( pubkey, paymail ) {\n    const url = await this.resolver.getVerifyUrlFor( paymail, pubkey )\n    const response = await this.http.get( url )\n    const body = await response.json()\n    const { match } = body\n    return match\n  }\n\n  /**\n   * Verifies if a given signature is valid for a given message. It uses\n   * different strategies depending on the capabilities of the server\n   * and the parameters Given. The priority order is.\n   * - If paymail is not provided, then normal signature verification is performed.\n   * - Use provided key (and check that belongs to given paymail address).\n   * - Get a new pubkey for given paymail address using pki.\n   * - If there is no way to intereact with the owner of the domain to verify the public key it returns false.\n   *\n   * @param {Message} message - Message to verify\n   * @param {String} signature - Signature\n   * @param {String} paymail - Signature owner paymail\n   * @param {String} pubkey - Optional. Public key that validates the signature.\n   */\n  async isValidSignature ( message, signature, paymail = null, pubkey = null ) {\n    if ( paymail == null && pubkey === null ) {\n      throw new Error( 'Must specify either paymail or pubkey' )\n    }\n    let senderPublicKey\n    if ( paymail ) {\n      if ( pubkey && await this.resolver.domainHasCapability( paymail.split( '@' )[ 1 ], CapabilityCodes.verifyPublicKeyOwner ) ) {\n        if ( await this.verifyPubkeyOwner( pubkey, paymail ) ) {\n          senderPublicKey = this.bsv.PublicKey.fromString( pubkey )\n        } else {\n          return false\n        }\n      } else {\n        const hasPki = await this.resolver.domainHasCapability( paymail.split( '@' )[ 1 ], CapabilityCodes.pki )\n        if ( hasPki ) {\n          const identityKey = await this.getPublicKey( paymail )\n          senderPublicKey = this.bsv.PublicKey.fromString( identityKey )\n        } else {\n          return false\n        }\n      }\n    }\n\n    const senderKeyAddress = this.bsv.Address.fromPublicKey( senderPublicKey || pubkey )\n    try {\n      const verified = message.verify( senderKeyAddress.toString(), signature )\n      return verified\n    } catch ( err ) {\n      return false\n    }\n  }\n\n  /**\n   * Gets the public profile information using the \"Public Profile\" protocol.\n   *\n   * @param {String} paymail - a paymail address\n   * @param {String} s - the preferred size of the image\n   */\n  async getPublicProfile ( paymail ) {\n    const publicProfileUrl = await this.resolver.getPublicProfileUrlFor( paymail )\n    const response = await this.http.get( publicProfileUrl )\n    if ( !response.ok ) {\n      const body = await response.json()\n      throw new Error( `Server failed with: ${JSON.stringify( body )}` )\n    }\n    const { avatar, name } = await response.json()\n    return { avatar, name }\n  }\n\n  async sendRawTx ( targetPaymail, hexTransaction, reference, metadata = {} ) {\n    if ( !hexTransaction ) {\n      throw new Error( 'transaction hex cannot be empty' )\n    }\n    const receiveTxUrl = await this.resolver.getSendTxUrlFor( targetPaymail )\n    const response = await this.http.postJson(\n      receiveTxUrl,\n      this.requestBodyFactory.buildBodySendTx( hexTransaction, reference, metadata )\n    )\n    if ( !response.ok ) {\n      const body = await response.json()\n      throw new Error( `Server failed with: ${JSON.stringify( body )}` )\n    }\n    return response.json()\n  }\n\n  async getP2pPaymentDestination ( targetPaymail, satoshis ) {\n    if ( !satoshis ) {\n      throw new Error( 'Amount in satohis needs to be specified' )\n    }\n    const paymentDestinationUrl = await this.resolver.getP2pPatmentDestinationUrlFor( targetPaymail )\n    const response = await this.http.postJson(\n      paymentDestinationUrl,\n      this.requestBodyFactory.buildBodyP2pPaymentDestination( satoshis )\n    )\n    if ( !response.ok ) {\n      const body = await response.json()\n      throw new Error( `Server failed with: ${JSON.stringify( body )}` )\n    }\n\n    const body = await response.json()\n    if ( !body.outputs ) {\n      throw new Error( 'Server answered with a wrong format. Missing outputs' )\n    }\n\n    return body\n  }\n}\n\nexport { PaymailClient }\n"],"names":["bsv","require","brfc","title","authors","version","autorString","join","trim","stringToHash","toString","hash","crypto","Hash","sha256sha256","Buffer","from","reverse","substring","CapabilityCodes","pki","paymentDestination","requestSenderValidation","verifyPublicKeyOwner","publicProfile","receiveTransaction","p2pPaymentDestination","witnessPublic","witnessCheckBaton","witnessCheckToken","witnessCheckSale","witnessCheckBuy","tokenLogo","tokenInformation","DnsOverHttps","fetch","config","aDomain","baseUrl","response","json","body","resolveSrv","DnsClient","dns","dohAli","dohGoogle","Promise","resolve","reject","err","result","code","domain","port","isSecure","domainFromDns","name","checkDomainIsSecure","then","validateDnssec","console","error","srvResponseDomain","originalDomain","domainsAreEqual","responseIsWwwSubdomain","isHandcashDomain","isHandcashInternalDomain","isMoneyButtonDomain","any","queryBsvaliasDomain","dnsResponse","Status","Answer","Error","data","split","responseDomain","AD","domain1","domain2","toLowerCase","replace","Http","url","_basicRequest","method","headers","JSON","stringify","options","timeout","race","credentials","_","setTimeout","EndpointResolver","dnsClient","http","_cache","aPaymail","alias","ensureCapabilityFor","getApiDescriptionFor","apiDescriptor","identityUrl","capabilities","addressUrl","aPubkey","capability","getWellKnownBaseUrl","fetchApiDescriptor","protocol","requestPort","undefined","requestDomain","exec","get","wellKnown","checkSrv","aCapability","domainHasCapability","instance","VerifiableMessage","parts","Message","concatenated","message","wifPrivateKey","sign","PrivateKey","fromWIF","keyAddress","signature","verify","senderHandle","amount","dt","purpose","toISOString","RequestBodyFactory","clock","senderInfo","privateKey","senderName","pubkey","providedSignature","now","forBasicAddressResolution","hexTransaction","reference","metadata","hex","satoshis","Clock","Date","PaymailNotFound","paymail","BrowserDns","aCallback","map","record","priority","weight","PaymailClient","fetch2","resolver","requestBodyFactory","args","URLSearchParams","contractId","uri","getIdentityUrlFor","getAddressUrlFor","postJson","buildBodyToRequestAddress","ok","output","getVerifyUrlFor","match","verifyPubkeyOwner","senderPublicKey","PublicKey","fromString","hasPki","getPublicKey","identityKey","senderKeyAddress","Address","fromPublicKey","verified","getPublicProfileUrlFor","publicProfileUrl","avatar","targetPaymail","getSendTxUrlFor","receiveTxUrl","buildBodySendTx","getP2pPatmentDestinationUrlFor","paymentDestinationUrl","buildBodyP2pPaymentDestination","outputs"],"mappings":"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"}