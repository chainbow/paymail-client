{"version":3,"file":"paymail-client.esm.js","sources":["../src/constants.js","../src/dns-client.js","../src/dns-over-https.js","../src/http.js","../src/EndpointResolver.js","../src/VerifiableMessage.js","../src/RequestBodyFactory.js","../src/Clock.js","../src/errors/PaymailNotFound.js","../src/BrowserDns.js","../src/PaymailClient.js"],"sourcesContent":["import { brfc } from '@moneybutton/brfc'\n\nexport const CapabilityCodes = {\n  pki: 'pki',\n  paymentDestination: 'paymentDestination',\n  requestSenderValidation: brfc(\n    'bsvalias Payment Addressing (Payer Validation)',\n    ['andy (nChain)'],\n    ''\n  ),\n  verifyPublicKeyOwner: brfc(\n    'bsvalias public key verify (Verify Public Key Owner)',\n    [],\n    ''\n  ),\n  publicProfile: brfc(\n    'Public Profile (Name & Avatar)',\n    ['Ryan X. Charles (Money Button)'],\n    '1'\n  ),\n  receiveTransaction: brfc(\n    'Send raw transaction',\n    ['Miguel Duarte (Money Button)', 'Ryan X. Charles (Money Button)', 'Ivan Mlinaric (Handcash)', 'Rafa (Handcash)'],\n    '1.1'\n  ),\n  p2pPaymentDestination: brfc(\n    'Get no monitored payment destination (p2p payment destination)',\n    ['Miguel Duarte (Money Button)', 'Ryan X. Charles (Money Button)', 'Ivan Mlinaric (Handcash)', 'Rafa (Handcash)'],\n    '1.1'\n  ),\n  witnessPublic: brfc(\n    'Public API of the Controllable UTXO Token Witness',\n    ['LI Long (ChainBow)'],\n    '1'\n  ),\n  witnessCheckBaton: brfc(\n    'Check Baton API of the Controllable UTXO Token Witness',\n    ['LI Long (ChainBow)'],\n    '1'\n  ),\n  witnessCheckToken: brfc(\n    'Check Token API of the Controllable UTXO Token Witness',\n    ['LI Long (ChainBow)'],\n    '1'\n  ),\n  tokenLogo: brfc(\n    'Logo URI of the Controllable UTXO Token',\n    ['LI Long (ChainBow)'],\n    '1'\n  ),\n  tokenInformation: brfc(\n    'Infomation URI of the Controllable UTXO Token',\n    ['LI Long (ChainBow)'],\n    '1'\n  ),\n}\n","// import { DnsOverHttps } from \"./dns-over-https\"\n\nclass DnsClient {\n  constructor (dns, doh) {\n    this.dns = dns\n    this.doh = doh\n  }\n\n  async checkSrv (aDomain) {\n    return new Promise((resolve, reject) => {\n      this.dns.resolveSrv(`_bsvalias._tcp.${aDomain}`, async (err, result) => {\n        try {\n          if (err && (err.code === 'ENODATA' || err.code === 'ENOTFOUND')) {\n            return resolve({\n              domain: aDomain,\n              port: 443,\n              isSecure: true\n            })\n          }\n          if (err) {\n            return reject(err)\n          }\n\n          const { name: domainFromDns, port, isSecure } = result[0]\n          resolve({\n            domain: domainFromDns,\n            port,\n            isSecure: this.checkDomainIsSecure(domainFromDns, aDomain) || isSecure\n          })\n        } catch (err) {\n          return reject(err)\n        }\n      })\n    }).then(result => {\n      if (result.isSecure) {\n        return result\n      } else {\n        return this.validateDnssec(aDomain)\n      }\n    }, (err) => {\n      console.error(err)\n      return err\n    })\n  }\n\n  checkDomainIsSecure (srvResponseDomain, originalDomain) {\n    if (this.domainsAreEqual(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.responseIsWwwSubdomain(srvResponseDomain, originalDomain)) {\n      return true\n    } else if (this.isHandcashDomain(originalDomain)) { // tell rafa to fix handcash and we can remove the special case :)\n      return this.domainsAreEqual('handcash-paymail-production.herokuapp.com', srvResponseDomain) || this.domainsAreEqual('handcash-cloud-production.herokuapp.com', srvResponseDomain)\n    } else if (this.isHandcashInternalDomain(originalDomain)) {\n      return this.domainsAreEqual('handcash-cloud-staging.herokuapp.com', srvResponseDomain)\n    } else if (this.domainsAreEqual('localhost', srvResponseDomain)) {\n      return true\n    } else if (this.isMoneyButtonDomain(srvResponseDomain)) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  isMoneyButtonDomain (aDomain) {\n    return this.domainsAreEqual(aDomain, 'moneybutton.com') || this.domainsAreEqual(aDomain, 'www.moneybutton.com')\n  }\n\n  responseIsWwwSubdomain (srvResponseDomain, originalDomain) {\n    return this.domainsAreEqual(srvResponseDomain, `www.${originalDomain}`)\n  }\n\n  isHandcashDomain (aDomain) {\n    return this.domainsAreEqual('handcash.io', aDomain)\n  }\n\n  isHandcashInternalDomain (aDomain) {\n    return this.domainsAreEqual('internal.handcash.io', aDomain)\n  }\n\n  async validateDnssec (aDomain) {\n    const dnsResponse = await this.doh.queryBsvaliasDomain(aDomain)\n    if (dnsResponse.Status !== 0 || !dnsResponse.Answer) {\n      throw new Error('Insecure domain.')\n    }\n    const data = dnsResponse.Answer[0].data.split(' ')\n    const port = data[2]\n    const responseDomain = data[3]\n    if (!dnsResponse.AD && !this.domainsAreEqual(aDomain, responseDomain)) {\n      throw new Error('Insecure domain.')\n    }\n    return {\n      port,\n      domain: responseDomain,\n      isSecure: dnsResponse.AD\n    }\n  }\n\n  domainsAreEqual (domain1, domain2) {\n    return domain1.toLowerCase().replace(/\\.$/, '') === domain2.toLowerCase().replace(/\\.$/, '')\n  }\n}\n\nexport { DnsClient }\n","class DnsOverHttps {\n  constructor (fetch, config) {\n    this.fetch = fetch\n    this.config = config\n  }\n\n  async resolveSrv (aDomain) {\n    const response = await this.fetch(`${this.config.baseUrl}?name=${aDomain}&type=SRV&cd=0`)\n    const body = await response.json()\n    return body\n  }\n\n  async queryBsvaliasDomain (aDomain) {\n    return this.resolveSrv(`_bsvalias._tcp.${aDomain}`)\n  }\n}\n\nexport { DnsOverHttps }\n","import 'abort-controller/polyfill'\nimport AbortController from 'abort-controller'\n\nclass Http {\n  constructor (fetch) {\n    this.fetch = fetch\n  }\n\n  async get (url) {\n    return this._basicRequest(url)\n  }\n\n  async postJson (url, body) {\n    return this._basicRequest(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    })\n  }\n\n  async _basicRequest (url, options = {}) {\n    const controller = new AbortController()\n    const timer = setTimeout(() => controller.abort(), 30000)\n    return this.fetch(url, {\n      ...options,\n      credentials: 'omit',\n      signal: controller.signal\n    }).then(result => {\n      clearTimeout(timer)\n      return result\n    })\n  }\n}\n\nexport { Http }\n","import { CapabilityCodes } from './constants'\nimport { DnsClient } from './dns-client'\nimport { DnsOverHttps } from './dns-over-https'\nimport { Http } from './http'\n\nclass EndpointResolver {\n  constructor (dns = null, fetch) {\n    this.dnsClient = new DnsClient(dns, new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' }))\n\n    this.http = new Http(fetch)\n    this._cache = {}\n  }\n\n  static create (dnsClient, fetch) {\n    const instance = new EndpointResolver(null, fetch)\n    instance.dnsClient = dnsClient\n    return instance\n  }\n\n  async getIdentityUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.pki)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const identityUrl = apiDescriptor.capabilities.pki\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return identityUrl\n  }\n\n  async getAddressUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.paymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const addressUrl = apiDescriptor.capabilities.paymentDestination\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return addressUrl\n  }\n\n  async getVerifyUrlFor (aPaymail, aPubkey) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.verifyPublicKeyOwner)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.verifyPublicKeyOwner]\n      .replace('{alias}', alias).replace('{domain.tld}', domain).replace('{pubkey}', aPubkey)\n    return url\n  }\n\n  async getPublicProfileUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.publicProfile)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.publicProfile]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getSendTxUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.receiveTransaction)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.receiveTransaction]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async getP2pPatmentDestinationUrlFor (aPaymail) {\n    const [alias, domain] = aPaymail.split('@')\n    await this.ensureCapabilityFor(domain, CapabilityCodes.p2pPaymentDestination)\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\n    const url = apiDescriptor.capabilities[CapabilityCodes.p2pPaymentDestination]\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\n    return url\n  }\n\n  async domainHasCapability (aDomain, capability) {\n    const apiDescriptor = await this.getApiDescriptionFor(aDomain)\n    return !!apiDescriptor.capabilities[capability]\n  }\n\n  async getApiDescriptionFor (aDomain) {\n    if (this._cache[aDomain]) {\n      return this._cache[aDomain]\n    }\n    const { domain, port } = await this.getWellKnownBaseUrl(aDomain)\n    const apiDescriptor = await this.fetchApiDescriptor(domain, port)\n    this._cache[aDomain] = apiDescriptor\n    return apiDescriptor\n  }\n\n  async fetchApiDescriptor (domain, port) {\n    const protocol = (domain === 'localhost' || domain === 'localhost.') ? 'http' : 'https'\n    const requestPort = (port === undefined || port.toString() === '443') ? '' : `:${port}`\n    const requestDomain = /^(.*?)\\.?$/.exec(domain)[1] // Get value from capture group\n    if (!requestDomain) {\n      throw new Error(`Invalid domain: ${domain}`)\n    }\n    const wellKnown = await this.http.get(`${protocol}://${requestDomain}${requestPort}/.well-known/bsvalias`)\n    const apiDescriptor = await wellKnown.json()\n    return apiDescriptor\n  }\n\n  async getWellKnownBaseUrl (aDomain) {\n    return this.dnsClient.checkSrv(aDomain)\n  }\n\n  async ensureCapabilityFor (aDomain, aCapability) {\n    if (!await this.domainHasCapability(aDomain, aCapability)) {\n      throw new Error(`Unknown capability \"${aCapability}\" for \"${aDomain}\"`)\n    }\n  }\n}\n\nexport { EndpointResolver }\n","class VerifiableMessage {\n  constructor (parts, bsv = null) {\n    if (bsv === null) {\n      bsv = require('bsv')\n      bsv.Message = require('bsv/message')\n    }\n    this.bsv = bsv\n    const concatenated = Buffer.from(parts.join(''))\n    this.message = new this.bsv.Message(concatenated)\n  }\n\n  static forBasicAddressResolution ({\n    senderHandle,\n    amount,\n    dt,\n    purpose\n  }) {\n    if (dt.toISOString) {\n      dt = dt.toISOString()\n    }\n\n    return new VerifiableMessage([\n      senderHandle,\n      amount || '0',\n      dt,\n      purpose\n    ])\n  }\n\n  sign (wifPrivateKey) {\n    return this.message.sign(this.bsv.PrivateKey.fromWIF(wifPrivateKey))\n  }\n\n  verify (keyAddress, signature) {\n    return this.message.verify(keyAddress, signature)\n  }\n}\n\nexport { VerifiableMessage }\n","import { VerifiableMessage } from './VerifiableMessage'\n\nclass RequestBodyFactory {\n  constructor (clock) {\n    this.clock = clock\n  }\n\n  buildBodyToRequestAddress (senderInfo, privateKey = null) {\n    const {\n      senderHandle,\n      amount,\n      senderName,\n      purpose,\n      pubkey,\n      signature: providedSignature\n    } = senderInfo\n\n    if (!providedSignature && privateKey === null) {\n      throw new Error('Missing private key or signature')\n    }\n\n    let dt, signature\n    if (providedSignature) {\n      if (!senderInfo.dt) {\n        throw new Error('missing datetime for given signature')\n      }\n      dt = senderInfo.dt\n      signature = providedSignature\n    } else {\n      dt = this.clock.now()\n      signature = VerifiableMessage.forBasicAddressResolution({\n        senderHandle,\n        amount,\n        dt,\n        purpose\n      }).sign(privateKey)\n    }\n\n    return {\n      senderHandle,\n      senderName,\n      purpose,\n      dt,\n      amount: amount || null,\n      pubkey,\n      signature\n    }\n  }\n\n  buildBodySendTx (hexTransaction, reference, metadata) {\n    return { hex: hexTransaction, metadata, reference }\n  }\n\n  buildBodyP2pPaymentDestination (satoshis) {\n    return { satoshis }\n  }\n}\n\nexport { RequestBodyFactory }\n","import moment from 'moment'\n\nclass Clock {\n  now () {\n    return moment()\n  }\n}\n\nexport { Clock }\n","class PaymailNotFound extends Error {\n  constructor (message, paymail) {\n    super(message)\n    this.paymail = paymail\n  }\n}\n\nexport { PaymailNotFound }\n","import { DnsOverHttps } from './dns-over-https'\n\nclass BrowserDns {\n  constructor (fetch) {\n    this.doh = new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' })\n  }\n\n  async resolveSrv (aDomain, aCallback) {\n    try {\n      const response = await this.doh.resolveSrv(aDomain)\n      if (response.Status === 0 && response.Answer) {\n        const data = response.Answer.map(record => {\n          const [priority, weight, port, name] = record.data.split(' ')\n          return {\n            priority,\n            weight,\n            port,\n            name,\n            isSecure: response.AD\n          }\n        })\n        aCallback(null, data)\n      } else if (!response.Answer) {\n        // ignore check response.Status === 0\n        aCallback({ code: 'ENODATA' })\n      } else {\n        aCallback(new Error('error during dns query'))\n      }\n    } catch (e) {\n      aCallback(e)\n    }\n  }\n}\n\nexport { BrowserDns }\n","import { EndpointResolver } from './EndpointResolver'\nimport { RequestBodyFactory } from './RequestBodyFactory'\nimport { Clock } from './Clock'\nimport { PaymailNotFound } from './errors/PaymailNotFound'\nimport { CapabilityCodes } from './constants'\nimport fetch from 'cross-fetch'\nimport { BrowserDns } from './BrowserDns'\nimport { Http } from './http'\n\nclass PaymailClient {\n  constructor ( dns = null, fetch2 = null, clock = null, bsv = null ) {\n    if ( fetch2 === null ) {\n      fetch2 = fetch\n    }\n    if ( dns === null ) {\n      dns = new BrowserDns( fetch2 )\n    }\n    if ( bsv === null ) {\n      bsv = require( 'bsv' )\n    }\n    this.bsv = bsv\n    this.resolver = new EndpointResolver( dns, fetch2 )\n    this.http = new Http( fetch2 )\n    this.requestBodyFactory = new RequestBodyFactory( clock !== null ? clock : new Clock() )\n  }\n\n  /**\n   * Get witness public.\n   *\n   * @param {String} domain - a domain\n   */\n  async witnessPublic ( domain ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessPublic ]\n    const response = await this.http.get( url )\n    return await response.json()\n  }\n\n  /**\n   * witness check baton.\n   *\n   * @param {String} domain - a domain\n   */\n  async witnessCheckBaton ( domain, args ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessCheckBaton ]\n    const response = await this.http.get( `${url}?${new URLSearchParams( args )}` )\n    return await response.json()\n  }\n\n  /**\n   * witness check token.\n   *\n   * @param {String} domain - a domain\n   */\n  async witnessCheckToken ( domain, args ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    const url = apiDescriptor.capabilities[ CapabilityCodes.witnessCheckToken ]\n    const response = await this.http.get( `${url}?${new URLSearchParams( args )}` )\n    return await response.json()\n  }\n\n  /**\n   * Get token's logo uri.\n   *\n   * @param {String} domain - a domain\n   * @param {String} contractId - contractId of Token\n   * return uri string\n   */\n  async tokenLogo ( domain, contractId ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    let uri = apiDescriptor.capabilities[ CapabilityCodes.tokenLogo ]\n    uri = uri.replace( '{contractId}', contractId )\n    return uri\n  }\n\n  /**\n * Get token's info json.\n *\n * @param {String} domain - a domain\n * @param {String} contractId - contractId of Token\n */\n  async tokenInformation ( domain, contractId ) {\n    const apiDescriptor = await this.resolver.getApiDescriptionFor( domain )\n    let uri = apiDescriptor.capabilities[ CapabilityCodes.tokenInformation ]\n    uri = uri.replace( '{contractId}', contractId )\n    const response = await this.http.get( uri )\n    return await response.json()\n  }\n\n  /**\n   * Uses pki flow to query for an identity key for a given paymail address.\n   *\n   * @param {String} paymail - a paymail address\n   */\n  async getPublicKey ( paymail ) {\n    const identityUrl = await this.resolver.getIdentityUrlFor( paymail )\n    const response = await this.http.get( identityUrl )\n    const { pubkey } = await response.json()\n    return pubkey\n  }\n\n  /**\n   * Uses `Basic Address Resolution` flow to query for a payment for output for the\n   * given paymail address.\n   *\n   * @param {String} aPaymail - a paymail address\n   * @param {Object} senderInfo - Object containing sender info\n   * @param {String} senderInfo.senderHandle - Sender paymail address\n   * @param {String} senderInfo.amount - Optional. Required amount.\n   * @param {String} senderInfo.senderName - Optional. Sender name.\n   * @param {String} senderInfo.purpose - Optional. Purpose of the payment.\n   * @param {String} senderInfo.pubkey - Optional. Public key used to sign the message.\n   * @param {String} senderInfo.signature - Optional. Valid signature according to paymail specification.\n   * @param {String} privateKey - Optional. private key to sign the request.\n   */\n  async getOutputFor ( aPaymail, senderInfo, privateKey = null ) {\n    const addressUrl = await this.resolver.getAddressUrlFor( aPaymail )\n    const response = await this.http.postJson(\n      addressUrl,\n      this.requestBodyFactory.buildBodyToRequestAddress( senderInfo, privateKey )\n    )\n    if ( !response.ok ) {\n      throw new PaymailNotFound( `Paymail not found: ${aPaymail}`, aPaymail )\n    }\n    const { output } = await response.json()\n    return output\n  }\n\n  /**\n   * Verify if the given public address belongs to the given\n   * paymail address.\n   *\n   * @param {String} pubkey - Public key to check.\n   * @param {String} paymail - a paymail address\n   */\n  async verifyPubkeyOwner ( pubkey, paymail ) {\n    const url = await this.resolver.getVerifyUrlFor( paymail, pubkey )\n    const response = await this.http.get( url )\n    const body = await response.json()\n    const { match } = body\n    return match\n  }\n\n  /**\n   * Verifies if a given signature is valid for a given message. It uses\n   * different strategies depending on the capabilities of the server\n   * and the parameters Given. The priority order is.\n   * - If paymail is not provided, then normal signature verification is performed.\n   * - Use provided key (and check that belongs to given paymail address).\n   * - Get a new pubkey for given paymail address using pki.\n   * - If there is no way to intereact with the owner of the domain to verify the public key it returns false.\n   *\n   * @param {Message} message - Message to verify\n   * @param {String} signature - Signature\n   * @param {String} paymail - Signature owner paymail\n   * @param {String} pubkey - Optional. Public key that validates the signature.\n   */\n  async isValidSignature ( message, signature, paymail = null, pubkey = null ) {\n    if ( paymail == null && pubkey === null ) {\n      throw new Error( 'Must specify either paymail or pubkey' )\n    }\n    let senderPublicKey\n    if ( paymail ) {\n      if ( pubkey && await this.resolver.domainHasCapability( paymail.split( '@' )[ 1 ], CapabilityCodes.verifyPublicKeyOwner ) ) {\n        if ( await this.verifyPubkeyOwner( pubkey, paymail ) ) {\n          senderPublicKey = this.bsv.PublicKey.fromString( pubkey )\n        } else {\n          return false\n        }\n      } else {\n        const hasPki = await this.resolver.domainHasCapability( paymail.split( '@' )[ 1 ], CapabilityCodes.pki )\n        if ( hasPki ) {\n          const identityKey = await this.getPublicKey( paymail )\n          senderPublicKey = this.bsv.PublicKey.fromString( identityKey )\n        } else {\n          return false\n        }\n      }\n    }\n\n    const senderKeyAddress = this.bsv.Address.fromPublicKey( senderPublicKey || pubkey )\n    try {\n      const verified = message.verify( senderKeyAddress.toString(), signature )\n      return verified\n    } catch ( err ) {\n      return false\n    }\n  }\n\n  /**\n   * Gets the public profile information using the \"Public Profile\" protocol.\n   *\n   * @param {String} paymail - a paymail address\n   * @param {String} s - the preferred size of the image\n   */\n  async getPublicProfile ( paymail ) {\n    const publicProfileUrl = await this.resolver.getPublicProfileUrlFor( paymail )\n    const response = await this.http.get( publicProfileUrl )\n    if ( !response.ok ) {\n      const body = await response.json()\n      throw new Error( `Server failed with: ${JSON.stringify( body )}` )\n    }\n    const { avatar, name } = await response.json()\n    return { avatar, name }\n  }\n\n  async sendRawTx ( targetPaymail, hexTransaction, reference, metadata = {} ) {\n    if ( !hexTransaction ) {\n      throw new Error( 'transaction hex cannot be empty' )\n    }\n    const receiveTxUrl = await this.resolver.getSendTxUrlFor( targetPaymail )\n    const response = await this.http.postJson(\n      receiveTxUrl,\n      this.requestBodyFactory.buildBodySendTx( hexTransaction, reference, metadata )\n    )\n    if ( !response.ok ) {\n      const body = await response.json()\n      throw new Error( `Server failed with: ${JSON.stringify( body )}` )\n    }\n    return response.json()\n  }\n\n  async getP2pPaymentDestination ( targetPaymail, satoshis ) {\n    if ( !satoshis ) {\n      throw new Error( 'Amount in satohis needs to be specified' )\n    }\n    const paymentDestinationUrl = await this.resolver.getP2pPatmentDestinationUrlFor( targetPaymail )\n    const response = await this.http.postJson(\n      paymentDestinationUrl,\n      this.requestBodyFactory.buildBodyP2pPaymentDestination( satoshis )\n    )\n    if ( !response.ok ) {\n      const body = await response.json()\n      throw new Error( `Server failed with: ${JSON.stringify( body )}` )\n    }\n\n    const body = await response.json()\n    if ( !body.outputs ) {\n      throw new Error( 'Server answered with a wrong format. Missing outputs' )\n    }\n\n    return body\n  }\n}\n\nexport { PaymailClient }\n"],"names":["CapabilityCodes","pki","paymentDestination","requestSenderValidation","brfc","verifyPublicKeyOwner","publicProfile","receiveTransaction","p2pPaymentDestination","witnessPublic","witnessCheckBaton","witnessCheckToken","tokenLogo","tokenInformation","DnsClient","constructor","dns","doh","checkSrv","aDomain","Promise","resolve","reject","resolveSrv","err","result","code","domain","port","isSecure","name","domainFromDns","checkDomainIsSecure","then","validateDnssec","console","error","srvResponseDomain","originalDomain","domainsAreEqual","responseIsWwwSubdomain","isHandcashDomain","isHandcashInternalDomain","isMoneyButtonDomain","dnsResponse","queryBsvaliasDomain","Status","Answer","Error","data","split","responseDomain","AD","domain1","domain2","toLowerCase","replace","DnsOverHttps","fetch","config","response","baseUrl","body","json","Http","get","url","_basicRequest","postJson","method","headers","JSON","stringify","options","controller","AbortController","timer","setTimeout","abort","credentials","signal","clearTimeout","EndpointResolver","dnsClient","http","_cache","create","instance","getIdentityUrlFor","aPaymail","alias","ensureCapabilityFor","apiDescriptor","getApiDescriptionFor","identityUrl","capabilities","getAddressUrlFor","addressUrl","getVerifyUrlFor","aPubkey","getPublicProfileUrlFor","getSendTxUrlFor","getP2pPatmentDestinationUrlFor","domainHasCapability","capability","getWellKnownBaseUrl","fetchApiDescriptor","protocol","requestPort","undefined","toString","requestDomain","exec","wellKnown","aCapability","VerifiableMessage","parts","bsv","require","Message","concatenated","Buffer","from","join","message","forBasicAddressResolution","senderHandle","amount","dt","purpose","toISOString","sign","wifPrivateKey","PrivateKey","fromWIF","verify","keyAddress","signature","RequestBodyFactory","clock","buildBodyToRequestAddress","senderInfo","privateKey","senderName","pubkey","providedSignature","now","buildBodySendTx","hexTransaction","reference","metadata","hex","buildBodyP2pPaymentDestination","satoshis","Clock","moment","PaymailNotFound","paymail","BrowserDns","aCallback","map","record","priority","weight","e","PaymailClient","fetch2","resolver","requestBodyFactory","args","URLSearchParams","contractId","uri","getPublicKey","getOutputFor","ok","output","verifyPubkeyOwner","match","isValidSignature","senderPublicKey","PublicKey","fromString","hasPki","identityKey","senderKeyAddress","Address","fromPublicKey","verified","getPublicProfile","publicProfileUrl","avatar","sendRawTx","targetPaymail","receiveTxUrl","getP2pPaymentDestination","paymentDestinationUrl","outputs"],"mappings":"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"}